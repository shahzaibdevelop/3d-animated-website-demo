/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 carglb.glb 
Author: ᗩᒪE᙭. Kᗩ.🚗 (https://sketchfab.com/Alex.Ka.)
License: CC-BY-NC-ND-4.0 (http://creativecommons.org/licenses/by-nc-nd/4.0/)
Source: https://sketchfab.com/3d-models/mclaren-f1-1993-by-alexka-294df724d96241cdbe0e0f3c91ad7fce
Title: McLaren F1 1993 By Alex.Ka.🤍🖤
*/

import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { useLayoutEffect } from 'react';
import { useThree } from '@react-three/fiber';

export function Carglb(props) {
  const { nodes, materials } = useGLTF('/model/carglb.glb');
  const { camera, scene } = useThree();
  const modelRef = useRef();

  gsap.registerPlugin(ScrollTrigger);

  // Define a separate timeline for details animation

  useLayoutEffect(() => {
    // Initial animation timeline
    const initialTimeline = gsap.timeline();

    initialTimeline.to(camera.position, {
      duration: 2,
      x: -0.036279039918251266,
      y: 1.4028483340350946,
      z: 4.668783619975426,
      ease: 'sine.inOut',
      delay: 1,
    });

    initialTimeline.to(
      camera.rotation,
      {
        duration: 2,
        x: -0.29189164818059604,
        y: -0.0074417327892797895,
        z: -0.0022360232431414633,
        ease: 'sine.inOut',
      },
      '-=2'
    );

    initialTimeline.from('#hero-heading', {
      opacity: 0,
      y: 20,
      duration: 1,
      ease: 'elastic.inOut',
    });

    // Ensure to clean up
    return () => {
      initialTimeline.kill(); // Kill the initial timeline on unmount or update
    };
  }, []);

  // ScrollTrigger animation setup
  const detailsTimeline = gsap.timeline({
    scrollTrigger:{
        trigger: '#details', // Trigger when scrolling reaches the '#details' element
        start: '-50% center', // Start animation when the center of viewport reaches 50% above the '#details'
        end: 'center center', // End animation when the bottom of the viewport reaches the center of '#details'
        markers: true, // For debugging, to visualize the trigger area
        scrub: true, // Smooth scrubbing effect
    }
  });
  useLayoutEffect(() => {

    // Animation details
    detailsTimeline.to(camera.position, {
      x: 3.6065685258525235,
      y: 1.5288356279331774,
      z: 2.902097139430903,
      ease: 'sine.inOut',
      duration: 1.4,
    });
    detailsTimeline.to(
      camera.rotation,
      {
        x: -0.4848599569160009,
        y: 0.8327581578975839,
        z: 0.37161659861045926,
        ease: 'sine.inOut',
        duration: 1.4,
      },
      '-=1.2' // Overlap slightly to create a smooth transition
    );

    // Ensure to clean up
    return () => {
      detailsTimeline.kill(); // Kill the details timeline on unmount or update
    };
  }, [camera, scene]);
  
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={1.075}>
        <mesh geometry={nodes.Object_2.geometry} material={materials.F1_front_plastic} />
        <mesh geometry={nodes.Object_3.geometry} material={materials.F1_nip_logo} />
        <mesh geometry={nodes.Object_4.geometry} material={materials.F1_red_F} />
        <mesh geometry={nodes.Object_5.geometry} material={materials.F1_red_R} />
        <mesh geometry={nodes.Object_6.geometry} material={materials.F1_side} />
        <mesh geometry={nodes.Object_7.geometry} material={materials.McLAREN_RED_LINE} />
        <mesh geometry={nodes.Object_8.geometry} material={materials.McLAREN_sidelogo} />
        <mesh geometry={nodes.Object_9.geometry} material={materials.McLAREN_sidelogo_FBUMPER} />
        <mesh geometry={nodes.Object_10.geometry} material={materials.McLaren_F1_1993_By_Alex_Ka} />
        <mesh geometry={nodes.Object_11.geometry} material={materials.McLaren_logo} />
        <mesh geometry={nodes.Object_12.geometry} material={materials.McLaren_supportlogo} />
        <mesh geometry={nodes.Object_13.geometry} material={materials.material} />
        <mesh geometry={nodes.Object_14.geometry} material={materials.black_aluminium} />
        <mesh geometry={nodes.Object_15.geometry} material={materials.black_chrome} />
        <mesh geometry={nodes.Object_16.geometry} material={materials.black_chrome2} />
        <mesh geometry={nodes.Object_17.geometry} material={materials.black_matte} />
        <mesh geometry={nodes.Object_18.geometry} material={materials.black_plastic} />
        <mesh geometry={nodes.Object_19.geometry} material={materials.bottom} />
        <mesh geometry={nodes.Object_20.geometry} material={materials.brakedisk} />
        <mesh geometry={nodes.Object_21.geometry} material={materials.brakelight} />
        <mesh geometry={nodes.Object_22.geometry} material={materials.bronze} />
        <mesh geometry={nodes.Object_23.geometry} material={materials.chrome} />
        <mesh geometry={nodes.Object_24.geometry} material={materials.chrome2} />
        <mesh geometry={nodes.Object_25.geometry} material={materials.door_stitch} />
        <mesh geometry={nodes.Object_26.geometry} material={materials.engine} />
        <mesh geometry={nodes.Object_27.geometry} material={materials.exhaust} />
        <mesh geometry={nodes.Object_28.geometry} material={materials.exhaust_gold} />
        <mesh geometry={nodes.Object_29.geometry} material={materials.exhaust_hole} />
        <mesh geometry={nodes.Object_30.geometry} material={materials.exhaust_metal_circles} />
        {/* <mesh geometry={nodes.Object_31.geometry} material={materials.floor} /> */}
        <mesh geometry={nodes.Object_32.geometry} material={materials.front_turn_signal} />
        <mesh geometry={nodes.Object_33.geometry} material={materials.fuel_clap} />
        <mesh geometry={nodes.Object_34.geometry} material={materials.grill1} />
        <mesh geometry={nodes.Object_35.geometry} material={materials.grill2} />
        <mesh geometry={nodes.Object_36.geometry} material={materials.grill_3} />
        <mesh geometry={nodes.Object_37.geometry} material={materials.grill_f} />
        <mesh geometry={nodes.Object_38.geometry} material={materials.grill_side} />
        <mesh geometry={nodes.Object_39.geometry} material={materials.headlight_1} />
        <mesh geometry={nodes.Object_40.geometry} material={materials.headlight_2} />
        <mesh geometry={nodes.Object_41.geometry} material={materials.headlightglass} />
        <mesh geometry={nodes.Object_42.geometry} material={materials.interior} />
        <mesh geometry={nodes.Object_43.geometry} material={materials.mirrors} />
        <mesh geometry={nodes.Object_44.geometry} material={materials.material_42} />
        <mesh geometry={nodes.Object_45.geometry} material={materials.material_43} />
        <mesh geometry={nodes.Object_46.geometry} material={materials.plate_F} />
        <mesh geometry={nodes.Object_47.geometry} material={materials.plate_R} />
        <mesh geometry={nodes.Object_48.geometry} material={materials.rear_lamp} />
        <mesh geometry={nodes.Object_49.geometry} material={materials.rear_turn_signal} />
        <mesh geometry={nodes.Object_50.geometry} material={materials.material_48} />
        <mesh geometry={nodes.Object_51.geometry} material={materials.rimbolt} />
        <mesh geometry={nodes.Object_52.geometry} material={materials.rimlogo} />
        <mesh geometry={nodes.Object_53.geometry} material={materials.side_turn_signal} />
        <mesh geometry={nodes.Object_54.geometry} material={materials.suport} />
        <mesh geometry={nodes.Object_55.geometry} material={materials.tire} />
        <mesh geometry={nodes.Object_56.geometry} material={materials.tire_side} />
        <mesh geometry={nodes.Object_57.geometry} material={materials.windo_F} />
        <mesh geometry={nodes.Object_58.geometry} material={materials.windo_R} />
        <mesh geometry={nodes.Object_59.geometry} material={materials.windo_S} />
      </group>
    </group>
  )
}

useGLTF.preload('/model/carglb.glb')

export default Carglb; // Exporting the component as default
